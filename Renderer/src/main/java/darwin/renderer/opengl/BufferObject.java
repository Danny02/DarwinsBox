/*
 *
 * *  Copyright (C) 2011 Daniel Heinrich <DannyNullZwo@gmail.com>  *   *  This program is free software: you can redistribute it and/or modify  *  it under dheinrich.own.engineails.  *   *  You should have received a copy of the GNU General Public License  *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package darwin.renderer.opengl;

import com.jogamp.opengl.util.GLBuffers;
import java.nio.*;
import javax.media.opengl.GL2GL3;
import javax.media.opengl.GLProfile;

import static darwin.renderer.GraphicContext.*;

/**
 *
 ** @author Daniel Heinrich <DannyNullZwo@gmail.com>
 */
public class BufferObject
{

    static {
        assert GLProfile.isAvailable(GLProfile.GL2GL3) : "This device doesn't support BufferObjects";
    }
    // <editor-fold defaultstate="collapsed" desc="OpenGL Enums">

    public enum Target
    {

        ARRAY(GL2GL3.GL_ARRAY_BUFFER),
        ELEMENT_ARRAY(GL2GL3.GL_ELEMENT_ARRAY_BUFFER),
        PIXEL_PACK(GL2GL3.GL_PIXEL_PACK_BUFFER),
        PIXEL_UNPACK(GL2GL3.GL_PIXEL_UNPACK_BUFFER);
        private int glvalue;

        private Target(int glvalue)
        {
            this.glvalue = glvalue;
        }
    }

    /**
     * The Access Type tells OpenGL how often you intend to modify the data.
     * These types are only optimization hints for the driver.
     */
    public enum Type
    {

        /**
         * You will modify the data once, then use it once, and repeat this
         * process many times.
         */
        STREAM,
        /**
         * You will specify the data only once, then use it many times without
         * modifying it.
         */
        STATIC,
        /**
         * You will specify or modify the data repeatedly, and use it repeatedly
         * after each time you do this.
         */
        DYNAMIC;
        private int glconst = 0x88E0 + 4 * ordinal();
    }

    /**
     * The Usage flag indicates what the source and destination of the data will
     * be.
     */
    public enum Usage
    {

        /**
         * The data is generated by the application and passed to GL for
         * rendering.
         */
        DRAW,
        /**
         * The data is generated by GL, and read back by the application. It is
         * not used by GL.
         */
        READ,
        /**
         * The data is generated by GL, and copied into the BO to be used for
         * rendering.
         */
        COPY;
    }

    public enum Access
    {

        READ(GL2GL3.GL_READ_ONLY),
        WRITE(GL2GL3.GL_WRITE_ONLY),
        READ_WRITE(GL2GL3.GL_READ_WRITE);
        private int glvalue;

        private Access(int glvalue)
        {
            this.glvalue = glvalue;
        }
    }// </editor-fold>
    public final int id;
    private final Target target;
    private int size;

    public BufferObject(Target target)
    {
        this.target = target;
        int[] ids = new int[1];
        getGL().glGenBuffers(1, ids, 0);
        id = ids[0];
    }

    /**
     * Writes data to the buffer and allcoates as much memory as needed for the
     * data
     * <p/>
     * @param data data which should be written to the buffer
     * @param usage Buffer usage type
     */
    public void bufferData(Buffer data, Type type, Usage usage)
    {
        int bsize = GLBuffers.sizeOfBufferElem(data);
        data.rewind();
        size = bsize * data.limit();
        getGL().glBufferData(target.glvalue, size, data, getGLConst(type, usage));
    }

    /**
     * same usage as bufferData(...), but it allocates the memory with
     * <b>null</b> and uploads the data with bufferSubData. This is a common
     * driver optimization for frequent data uploading to the same buffer.
     * <p/>
     * @param data
param type param usage
     */
    public void bufferDataOptimized(Buffer data, Type type, Usage usage)
    {
        allocate(data.limit() * GLBuffers.sizeOfBufferElem(data), type, usage);
        bufferSubData(0, data);
    }

    /**
     * allocate memory for the Buffer <br><br><i>glBufferData with null as
     * data</i></br></br>
     * <p/>
     * @param bsize memory size in bytes which should be allocated
     * @param usage Buffer usage type
     */
    public void allocate(int bsize, Type type, Usage usage)
    {
        size = bsize;
        getGL().glBufferData(target.glvalue, size, null,
                getGLConst(type, usage));
    }

    /**
     * overwrites a specified data block, enough memory must already be
     * allocated in the buffer
     * <p/>
     * @param offset param data
     */
    public void bufferSubData(int offset, Buffer data)
    {
        int bsize = GLBuffers.sizeOfBufferElem(data);
        data.rewind();
        getGL().glBufferSubData(target.glvalue, offset, bsize * data.limit(),
                data);
    }

    public ByteBuffer mapBuffer(Access access)
    {
        return getGL().glMapBuffer(target.glvalue, access.glvalue);
    }

    public ByteBuffer mapRange(Access access, int offset, int length)
    {
        return getGL().getGL2().glMapBufferRange(target.glvalue, offset, length,
                access.glvalue);
    }

    public void bind()
    {
        bind(id);
    }

    public void disable()
    {
        bind(0);
    }

    private void bind(int id)
    {
        getGL().glBindBuffer(target.glvalue, id);
    }

    public int getSize()
    {
        return size;
    }

    public Target getTarget()
    {
        return target;
    }

    private static int getGLConst(Type type, Usage usage)
    {
        return type.glconst + usage.ordinal();
    }

    public static BufferObject buildIndiceBuffer(int... indice)
    {
        BufferObject buf = new BufferObject(Target.ELEMENT_ARRAY);
        buf.bind();
        {
            Buffer b = GLBuffers.newDirectIntBuffer(indice);
            buf.bufferData(b, Type.STATIC, Usage.DRAW);
        }
        buf.disable();

        return buf;
    }

    @Override
    public boolean equals(Object obj)
    {
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final BufferObject other = (BufferObject) obj;
        if (this.id != other.id) {
            return false;
        }
        return true;
    }

    @Override
    public int hashCode()
    {
        return id;
    }
}
